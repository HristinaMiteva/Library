// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240313092838_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Library.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<Guid?>("PublisherId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("138e4770-b474-4906-a8a5-a32bf2db6704"),
                            Author = "Maurice Sendak",
                            ISBN = "0060254920",
                            Image = "https://upload.wikimedia.org/wikipedia/en/8/8d/Where_The_Wild_Things_Are_%28book%29_cover.jpg",
                            Pages = 48,
                            PublisherId = new Guid("5d2db36e-b584-4abf-a093-5b9ffe196486"),
                            PublishingYear = 1963,
                            Title = "Where the Wild Things Are"
                        },
                        new
                        {
                            Id = new Guid("ddcda4e6-325a-4e79-9918-796b3918ee13"),
                            Author = "Eric Carle",
                            ISBN = "0399226907",
                            Image = "https://m.media-amazon.com/images/I/81n9Y6AGy6L._AC_UF1000,1000_QL80_.jpg",
                            Pages = 26,
                            PublisherId = new Guid("5d2db36e-b584-4abf-a093-5b9ffe196486"),
                            PublishingYear = 1969,
                            Title = "The Very Hungry Caterpillar"
                        },
                        new
                        {
                            Id = new Guid("747658a0-9add-4f53-a777-52a10757c027"),
                            Author = "Margaret Wise Brown",
                            ISBN = "0060775858",
                            Image = "https://m.media-amazon.com/images/I/81E6tmYOD7L._AC_UF1000,1000_QL80_.jpg",
                            Pages = 32,
                            PublisherId = new Guid("5d2db36e-b584-4abf-a093-5b9ffe196486"),
                            PublishingYear = 1947,
                            Title = "Goodnight Moon"
                        },
                        new
                        {
                            Id = new Guid("0f13122c-f86f-4383-a35b-839fd0161240"),
                            Author = "Dr. Seuss",
                            ISBN = "9780394800011",
                            Image = "https://upload.wikimedia.org/wikipedia/en/1/10/The_Cat_in_the_Hat.png",
                            Pages = 61,
                            PublisherId = new Guid("5d2db36e-b584-4abf-a093-5b9ffe196486"),
                            PublishingYear = 1957,
                            Title = "The Cat in the Hat"
                        },
                        new
                        {
                            Id = new Guid("979dc70f-b3d1-4c68-bb43-e0e74ebfe94e"),
                            Author = "Dr. Seuss",
                            ISBN = "9780394800165",
                            Image = "https://m.media-amazon.com/images/I/71e4ln93HOL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 62,
                            PublisherId = new Guid("b2b63af9-18b0-48f4-9078-30836e6f54f7"),
                            PublishingYear = 1960,
                            Title = "Green Eggs and Ham"
                        },
                        new
                        {
                            Id = new Guid("dbbecd36-3ef2-49ea-a962-453496088b22"),
                            Author = "J.K. Rowling",
                            ISBN = "9780590353427",
                            Image = "https://m.media-amazon.com/images/I/71-++hbbERL._AC_UF894,1000_QL80_.jpg",
                            Pages = 320,
                            PublisherId = new Guid("b2b63af9-18b0-48f4-9078-30836e6f54f7"),
                            PublishingYear = 1997,
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = new Guid("ff2322c8-b5d6-4ed6-a4c0-4df7ff58e706"),
                            Author = "Julia Donaldson",
                            ISBN = "9780142403877",
                            Image = "https://cdn.ozone.bg/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/t/h/ad8a2ed668a51de9d6a0945e6ab4c650/the-gruffalo-30.jpg",
                            Pages = 32,
                            PublisherId = new Guid("36bda0c2-9ea8-4c67-a86f-f81486343f12"),
                            PublishingYear = 1999,
                            Title = "The Gruffalo"
                        },
                        new
                        {
                            Id = new Guid("a0d8a706-5957-4bff-888d-8b6a041e9c90"),
                            Author = "E.B. White",
                            ISBN = "9780061124952",
                            Image = "https://www.artsofimagination.org/wp-content/uploads/2024/01/Charlottes-Web-cover-1.jpeg",
                            Pages = 192,
                            PublisherId = new Guid("36bda0c2-9ea8-4c67-a86f-f81486343f12"),
                            PublishingYear = 1952,
                            Title = "Charlotte's Web"
                        },
                        new
                        {
                            Id = new Guid("8ee79623-ccfa-40dc-83c6-7adcb5efc20c"),
                            Author = "Beatrix Potter",
                            ISBN = "9780723247708",
                            Image = "https://m.media-amazon.com/images/I/61ASCNFMAlL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 72,
                            PublisherId = new Guid("1ec7709f-f106-441d-b0d8-dbdc5d06971d"),
                            PublishingYear = 1902,
                            Title = "The Tale of Peter Rabbit"
                        },
                        new
                        {
                            Id = new Guid("906b1190-c3cd-4290-a003-b3c6cc295d74"),
                            Author = "C.S. Lewis",
                            ISBN = "9780064471046",
                            Image = "https://m.media-amazon.com/images/I/81QUw81WcoL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 208,
                            PublisherId = new Guid("1ec7709f-f106-441d-b0d8-dbdc5d06971d"),
                            PublishingYear = 1950,
                            Title = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe"
                        },
                        new
                        {
                            Id = new Guid("cde9a74a-b50e-424e-8322-f4204b5a49b3"),
                            Author = "Lewis Carroll",
                            ISBN = "9781853260025",
                            Image = "https://ik.imagekit.io/panmac/tr:f-auto,di-placeholder_portrait_aMjPtD9YZ.jpg,w-270/edition/9781447279990.jpg",
                            Pages = 96,
                            PublisherId = new Guid("bb40bb66-099d-40ff-8994-d5dc15e3d97d"),
                            PublishingYear = 1865,
                            Title = "Alice's Adventures in Wonderland"
                        },
                        new
                        {
                            Id = new Guid("a118363d-bdf3-41d7-a2b3-7e0323a2bb89"),
                            Author = "A.A. Milne",
                            ISBN = "9780525444435",
                            Image = "https://m.media-amazon.com/images/I/61x0v4ZahgL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 145,
                            PublisherId = new Guid("bb40bb66-099d-40ff-8994-d5dc15e3d97d"),
                            PublishingYear = 1926,
                            Title = "Winnie-the-Pooh"
                        },
                        new
                        {
                            Id = new Guid("ef8856a6-ecef-4b27-8ed1-6bd832c3c204"),
                            Author = "Frances Hodgson Burnett",
                            ISBN = "9780064401883",
                            Image = "https://m.media-amazon.com/images/I/91qOXqI3aQL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 288,
                            PublisherId = new Guid("e6dc8da9-4a57-4821-beb3-24117746b333"),
                            PublishingYear = 1911,
                            Title = "The Secret Garden"
                        },
                        new
                        {
                            Id = new Guid("d34ce8cc-7126-4a77-b82f-c10706cbd2d5"),
                            Author = "L.M. Montgomery",
                            ISBN = "9780141321592",
                            Image = "https://m.media-amazon.com/images/I/81NDwdjGwSL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 320,
                            PublisherId = new Guid("e6dc8da9-4a57-4821-beb3-24117746b333"),
                            PublishingYear = 1908,
                            Title = "Anne of Green Gables"
                        },
                        new
                        {
                            Id = new Guid("00cce25b-492b-4aaf-bce8-717f1114cd3d"),
                            Author = "J.M. Barrie",
                            ISBN = "9781503261206",
                            Image = "https://mir-s3-cdn-cf.behance.net/project_modules/hd/35a95226596057.5635798b56b8f.jpg",
                            Pages = 198,
                            PublisherId = new Guid("e6dc8da9-4a57-4821-beb3-24117746b333"),
                            PublishingYear = 1911,
                            Title = "Peter Pan"
                        },
                        new
                        {
                            Id = new Guid("38013e7b-d39e-4c8a-928c-b2299d003f24"),
                            Author = "Kenneth Grahame",
                            ISBN = "9780141321127",
                            Image = "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1630642716i/5659.jpg",
                            Pages = 224,
                            PublisherId = new Guid("e04651b0-5913-4ee7-a691-cdb85933f3ee"),
                            PublishingYear = 1908,
                            Title = "The Wind in the Willows"
                        },
                        new
                        {
                            Id = new Guid("228ccec7-4043-41a2-86c2-fddebeb9b9a6"),
                            Author = "Roald Dahl",
                            ISBN = "9780142410318",
                            Image = "https://m.media-amazon.com/images/I/81Dp5Of3zeL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 200,
                            PublisherId = new Guid("e04651b0-5913-4ee7-a691-cdb85933f3ee"),
                            PublishingYear = 1964,
                            Title = "Charlie and the Chocolate Factory"
                        },
                        new
                        {
                            Id = new Guid("701e0c9e-a0ce-4068-82fc-bf8bc0104fd2"),
                            Author = "Watty Piper",
                            ISBN = "9780448405209",
                            Image = "https://m.media-amazon.com/images/I/71pf9-VV4NL._AC_UF1000,1000_QL80_.jpg",
                            Pages = 48,
                            PublisherId = new Guid("b2b63af9-18b0-48f4-9078-30836e6f54f7"),
                            PublishingYear = 1930,
                            Title = "The Little Engine That Could"
                        },
                        new
                        {
                            Id = new Guid("721c3f0f-593a-4385-bd83-6a754b4bda80"),
                            Author = "Dr. Seuss",
                            ISBN = "9780394823379",
                            Image = "https://www.thoughtco.com/thmb/TRDolGdhiKx7SLOZIBPLtIK3ipc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/lorax-597f13009abed50010c7da1d.jpg",
                            Pages = 72,
                            PublisherId = new Guid("b2b63af9-18b0-48f4-9078-30836e6f54f7"),
                            PublishingYear = 1971,
                            Title = "The Lorax"
                        });
                });

            modelBuilder.Entity("Library.Data.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d2db36e-b584-4abf-a093-5b9ffe196486"),
                            Name = "Albert Whitman"
                        },
                        new
                        {
                            Id = new Guid("ea3480ae-657b-4bcf-ac44-8e45081b58e6"),
                            Name = "Holiday House"
                        },
                        new
                        {
                            Id = new Guid("b2b63af9-18b0-48f4-9078-30836e6f54f7"),
                            Name = "Candlewick Press"
                        },
                        new
                        {
                            Id = new Guid("931e6d94-1fc5-4af1-a722-f05bde8c64f9"),
                            Name = "August House"
                        },
                        new
                        {
                            Id = new Guid("36bda0c2-9ea8-4c67-a86f-f81486343f12"),
                            Name = "Arbordale Publishing"
                        },
                        new
                        {
                            Id = new Guid("5d24ced7-7e83-4dae-9b60-d559d9d96bb0"),
                            Name = "Chronicle Books"
                        },
                        new
                        {
                            Id = new Guid("1ec7709f-f106-441d-b0d8-dbdc5d06971d"),
                            Name = "Free Spirit Publishing"
                        },
                        new
                        {
                            Id = new Guid("bb40bb66-099d-40ff-8994-d5dc15e3d97d"),
                            Name = "Kids Can Press"
                        },
                        new
                        {
                            Id = new Guid("e6dc8da9-4a57-4821-beb3-24117746b333"),
                            Name = "Quirk Books"
                        },
                        new
                        {
                            Id = new Guid("e04651b0-5913-4ee7-a691-cdb85933f3ee"),
                            Name = "Flying Eye Books"
                        });
                });

            modelBuilder.Entity("Library.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Library.Data.Models.UserBook", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Library.Data.Models.Book", b =>
                {
                    b.HasOne("Library.Data.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library.Data.Models.UserBook", b =>
                {
                    b.HasOne("Library.Data.Models.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Data.Models.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Library.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Library.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Library.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Data.Models.Book", b =>
                {
                    b.Navigation("UserBooks");
                });

            modelBuilder.Entity("Library.Data.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Data.Models.User", b =>
                {
                    b.Navigation("UserBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
